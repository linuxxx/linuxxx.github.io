<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Sekiro RPC 服务改造</title>
    <link href="/2022/03/14/yuque/Sekiro%20RPC%20%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0/"/>
    <url>/2022/03/14/yuque/Sekiro%20RPC%20%E6%9C%8D%E5%8A%A1%E6%94%B9%E9%80%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="目标需求"><a href="#目标需求" class="headerlink" title="目标需求"></a>目标需求</h1><p>1, 日志上传 kafka<br>2, 超时时间增加到 30s<br>3, 查看 clientList 的时候增加数量字段<br>4, response 返回值里面增加 group<br>5, sekiro 切换 group</p><h2 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h2><p>invoke_timeout 调用时带上该参数即可，否则默认 5 秒超时。</p><h2 id="其他有用参数"><a href="#其他有用参数" class="headerlink" title="其他有用参数"></a>其他有用参数</h2><p><a href="https://sekiro.virjar.com/sekiro-doc/01_user_manual/6.specialParam.html">https://sekiro.virjar.com/sekiro-doc/01_user_manual&#x2F;6.specialParam.html</a><br>**__invoke_trace_id **<br>可以带上该参数用于追踪更详细的调用日志，出问题时候用于排查问题</p><p>**__NOT_COMPRESS_FOR_SEKIRO_SEKIRO **<br>此处调用不压缩</p><h2 id="HTTP-请求类"><a href="#HTTP-请求类" class="headerlink" title="HTTP 请求类"></a>HTTP 请求类</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">/** * http业务请求，channelType为: * &#123;@link ChannelType#INVOKER_HTTP&#125; */ public<br>class ChannelTypeInvokerHttp<br></code></pre></td></tr></table></figure><h2 id="clientList-增加数量"><a href="#clientList-增加数量" class="headerlink" title="clientList 增加数量"></a>clientList 增加数量</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">public static<br><span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span><br>  CommonRes<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span><br>    success(T t) &#123; CommonRes<span class="hljs-tag">&lt;<span class="hljs-name">T</span>&gt;</span><br>      ret = new CommonRes<span class="hljs-tag">&lt;&gt;</span>(); ret.status = statusOK; ret.message = null;<br>      ret.data = t; ret.size = ((List) t).size(); return ret; &#125;&lt;/T<br>    &gt;&lt;/T<br>  &gt;&lt;/T<br>&gt;<br></code></pre></td></tr></table></figure><h2 id="response-返回值增加-group"><a href="#response-返回值增加-group" class="headerlink" title="response 返回值增加 group"></a>response 返回值增加 group</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">//<br>http调用通道，对于python等其他异构语言，可以通过标准的http协议调用只狼服务，请注意http需要保持keepAlive，减少tcp连接通道建立开销<br>INVOKER_HTTP(1) &#123; private void writeSekiroPacket(Channel channel, SekiroPacket<br>sekiroPacket, InvokeRecord invokeRecord) &#123;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">/** * 增加group * * @param data * @param clientId * @return */ public static<br>com.virjar.sekiro.business.api.core.SekiroFastJson.FastJson<br>quickJsonDecode(byte[] data, String clientId, String groupId) &#123; ByteBuf byteBuf<br>= Unpooled.wrappedBuffer(data); int status = byteBuf.readInt(); String<br>errorMessage = readString(byteBuf); String dataJson = readString(byteBuf);<br>String finalJson = &quot;&#123;\&quot;clientId\&quot;:&quot; + JSONObject.toJSONString(clientId) +<br>&quot;,\&quot;message\&quot;:&quot; + JSONObject.toJSONString(errorMessage) + &quot;,\&quot;status\&quot;:&quot; +<br>status + &quot;,\&quot;data\&quot;:&quot; + dataJson + &quot;,\&quot;group\&quot;:&quot; + groupId + &quot;&#125;&quot;; return new<br>com.virjar.sekiro.business.api.core.SekiroFastJson.FastJson(status,<br>errorMessage, dataJson, finalJson); &#125;<br></code></pre></td></tr></table></figure><h2 id="sekiro-切换-group-黑名单功能"><a href="#sekiro-切换-group-黑名单功能" class="headerlink" title="sekiro 切换 group 黑名单功能"></a>sekiro 切换 group 黑名单功能</h2><p>考虑到服务端不好做处理，在不影响服务端的正常情况下，考虑由客户端实现<br>api：<br><a href="http://localhost:5620/business-demo/invoke?group=tb1&action=switchGroup&groupName=wait">http://localhost:5620/business-demo/invoke?group=XXX&action=switchGroup&groupName=wait</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">@Action(&quot;switchGroup&quot;) public class SwitchGroupHandler implements RequestHandler<br>&#123; @RequiresApi(api = Build.VERSION_CODES.O) @Override public void<br>handleRequest(SekiroRequest sekiroRequest, SekiroResponse sekiroResponse) &#123;<br>String groupName = sekiroRequest.getString(&quot;groupName&quot;); new Thread(new<br>Runnable() &#123; public void run() &#123; //sleep设置的是时长 try &#123; Thread.sleep(1000); &#125;<br>catch (InterruptedException e) &#123; e.printStackTrace(); &#125; switchGroup(groupName);<br>&#125; &#125;).start(); sekiroResponse.success(groupName + &quot;do switch group, &quot; + &quot;wait 1<br>seconds&quot;); &#125; @RequiresApi(api = Build.VERSION_CODES.O) private void<br>switchGroup(String groupName) &#123; MainActivity.rpcServer.destroy(0);//注销该链接<br>MainActivity.rpcServer = new SekiroClient(groupName, Utils.clientId, Utils.host,<br>Utils.port).setupSekiroRequestInitializer(new SekiroRequestInitializer() &#123;<br>@Override public void onSekiroRequest(SekiroRequest sekiroRequest,<br>HandlerRegistry handlerRegistry) &#123; handlerRegistry.registerSekiroHandler(new<br>ClientTimeHandler()); handlerRegistry.registerSekiroHandler(new TbReqHandler());<br>handlerRegistry.registerSekiroHandler(new SwitchGroupHandler()); &#125; &#125;);<br>MainActivity.rpcServer.start(); &#125; &#125;<br></code></pre></td></tr></table></figure><p>测试 ok~</p><h2 id="日志写入-kafka"><a href="#日志写入-kafka" class="headerlink" title="日志写入 kafka"></a>日志写入 kafka</h2><p>位置：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1647225496772-2cfe1a07-b04b-4ff4-8647-32d2f07521ce.png#clientId=uf4701892-be02-4&from=paste&height=313&id=u426304ed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=626&originWidth=1347&originalType=binary%E2%88%B6=1&size=145477&status=done&style=none&taskId=ua91a4378-b8de-477d-8190-1ca94dd219a&width=673.5" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 日志发送到kafka</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> invokeRecord</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> json200</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> status</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write2kafka</span><span class="hljs-params">(InvokeRecord invokeRecord, String json200, String status)</span> &#123;<br>        Producer&lt;String, String&gt; producer = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            props.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;XXXXXX:XXXX&quot;</span>);<br>            props.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>            props.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br><br>            producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(props);<br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;crawler_risk_log&quot;</span>, <span class="hljs-string">&quot;clientId&quot;</span>, invokeRecord.getClientId()));<br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;crawler_risk_log&quot;</span>, <span class="hljs-string">&quot;group&quot;</span>, invokeRecord.getSekiroGroup()));<br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;crawler_risk_log&quot;</span>, <span class="hljs-string">&quot;action&quot;</span>, invokeRecord.getAction()));<br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;crawler_risk_log&quot;</span>, <span class="hljs-string">&quot;status&quot;</span>, status));<br>            producer.send(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(<span class="hljs-string">&quot;crawler_risk_log&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>, json200));<br>            invokeRecord.getLogger().info(<span class="hljs-string">&quot;write data to kafka success&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            invokeRecord.getLogger().error(<span class="hljs-string">&quot;write data to kafka error&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (producer != <span class="hljs-literal">null</span>) &#123;<br>                producer.close();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDA经验</title>
    <link href="/2022/03/10/yuque/IDA%E7%BB%8F%E9%AA%8C/"/>
    <url>/2022/03/10/yuque/IDA%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>TAB 键可以在 F5 与汇编代码来回跳转</p><h1 id="so-层的函数参数"><a href="#so-层的函数参数" class="headerlink" title="so 层的函数参数"></a>so 层的函数参数</h1><p>&#x2F;&#x2F; 第一个参数是 env<br>&#x2F;&#x2F; 第二个参数，实例方法是 jobject，静态方法是 jclazz，直接填 0，一般用不到。</p><p>**在第一个参数上按 y，输入 JNIEnv* **， jni 的 api 就被识别出来了</p><h1 id="重命名参数"><a href="#重命名参数" class="headerlink" title="重命名参数"></a>重命名参数</h1><p>按 N 在其他参数上重命名</p><h1 id="跳转到指定地址"><a href="#跳转到指定地址" class="headerlink" title="跳转到指定地址"></a>跳转到指定地址</h1><p>按 G</p><h1 id="R0-R3-寄存器"><a href="#R0-R3-寄存器" class="headerlink" title="R0-R3 寄存器"></a>R0-R3 寄存器</h1><p>根据 ARM 调用约定，入参前四个分别通过 R0-R3 调用，返回值通过 R0 返回</p><h1 id="加密常量转-16-进制"><a href="#加密常量转-16-进制" class="headerlink" title="加密常量转 16 进制"></a>加密常量转 16 进制</h1><p>按 H 转为 16 进制</p><p>代码中多次出现 sub_3151C，进去看一看。<br>一个哈希算法，可以简单划分成填充和加密两部分，直接 Hook 加密函数，打印入参和出参，发现 IV 和 block 没有变化，说明填充是没有魔改的。魔改的是加密算法本身。<br><strong>魔改的是算法本身，因为运算函数的入参是正常的、填充后的明文，所以不存在自定义填充、或者对明文做变换的可能，出参即是输出的结果，所以算法并不是在标准流程之后做了一些自定义步骤，它修改的——就是算法本身。</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">public void hook_3151C()&#123; // 获取HookZz对象 IHookZz hookZz =<br>HookZz.getInstance(emulator); // 加载HookZz，支持inline<br>hook，文档看https://github.com/jmpews/HookZz // enable hook<br>hookZz.enable_arm_arm64_b_branch(); // 测试enable_arm_arm64_b_branch，可有可无<br>// hook MDStringOld hookZz.wrap(module.base + 0x3151C + 1, new<br>WrapCallback<span class="hljs-tag">&lt;<span class="hljs-name">HookZzArm32RegisterContext</span></span><br><span class="hljs-tag">  &gt;</span>() &#123; // inline wrap导出函数 @Override // 方法执行前 public void<br>  preCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; // 类似于Frida<br>  args[0] Pointer input = ctx.getPointerArg(0); byte[] inputhex =<br>  input.getByteArray(0, 20); Inspector.inspect(inputhex, &quot;IV&quot;); Pointer text =<br>  ctx.getPointerArg(1); byte[] texthex = text.getByteArray(0, 64);<br>  Inspector.inspect(texthex, &quot;block&quot;); ctx.push(input); ctx.push(text); &#125;;<br>  @Override // 方法执行后 public void postCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; Pointer text =<br>  ctx.pop(); Pointer IV = ctx.pop(); byte[] IVhex = IV.getByteArray(0, 20);<br>  Inspector.inspect(IVhex, &quot;IV&quot;); byte[] outputhex = text.getByteArray(0, 64);<br>  Inspector.inspect(outputhex, &quot;block out&quot;); &#125; &#125;);<br>  hookZz.disable_arm_arm64_b_branch(); &#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">HookZzArm32RegisterContext</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么这个时候就该考虑，SHA1 算法的运算部分是由什么组成？SHA1 和 MD5 采用了相同的结构，每 512 比特分组需要一轮运算，我们的输入长度不超过一个分组的长度，所以只用考虑一轮运算。一轮运算是 80 步，每隔 20 步是一种模式。</p><p>进行十数次甚至数十次的 inline hook，这种情况下我们使用 Unidbg 的 console debugger。<br>emulator.attach().addBreakPoint(module.base+0x3161E);</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>改机对抗收集</title>
    <link href="/2022/03/07/yuque/%E6%94%B9%E6%9C%BA%E5%AF%B9%E6%8A%97%E6%94%B6%E9%9B%86/"/>
    <url>/2022/03/07/yuque/%E6%94%B9%E6%9C%BA%E5%AF%B9%E6%8A%97%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="netlink-获取-mac-地址-1"><a href="#netlink-获取-mac-地址-1" class="headerlink" title="netlink 获取 mac 地址 1"></a>netlink 获取 mac 地址 1</h1><p><a href="https://github.com/w296488320/getMacForNetlink">https://github.com/w296488320/getMacForNetlink</a></p>]]></content>
    
    
    <categories>
      
      <category>改机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>改机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快手H5逆向，字体反爬，互动量获取</title>
    <link href="/2022/02/24/yuque/%E5%BF%AB%E6%89%8BH5%E9%80%86%E5%90%91%EF%BC%8C%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC%EF%BC%8C%E4%BA%92%E5%8A%A8%E9%87%8F%E8%8E%B7%E5%8F%96/"/>
    <url>/2022/02/24/yuque/%E5%BF%AB%E6%89%8BH5%E9%80%86%E5%90%91%EF%BC%8C%E5%AD%97%E4%BD%93%E5%8F%8D%E7%88%AC%EF%BC%8C%E4%BA%92%E5%8A%A8%E9%87%8F%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>获取快手视频点赞数、评论数、 播放数</p><h1 id="分析视频接口"><a href="#分析视频接口" class="headerlink" title="分析视频接口"></a>分析视频接口</h1><p><a href="https://m.gifshow.com/fw/photo/5232901352181146092">https://m.gifshow.com/fw/photo/5232901352181146092</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645671500955-8ecb9aac-707a-4320-8047-8fce0a3be2e8.png#clientId=u1652befd-1cd7-4&from=paste&height=330&id=iwoiU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=660&originWidth=450&originalType=binary%E2%88%B6=1&size=516468&status=done&style=none&taskId=u9f116621-325f-4c81-a319-244c6d6163a&width=225" alt="image.png"></p><h2 id="请求头："><a href="#请求头：" class="headerlink" title="请求头："></a>请求头：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">sec-ch-ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;98&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;98&quot;</span><br>sec-ch-ua-mobile: ?<span class="hljs-number">1</span><br>sec-ch-ua-platform: <span class="hljs-string">&quot;Android&quot;</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Linux; Android <span class="hljs-number">6.0</span>; Nexus <span class="hljs-number">5</span> Build/MRA58N) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">98.0</span><span class="hljs-number">.4758</span><span class="hljs-number">.102</span> Mobile Safari/<span class="hljs-number">537.36</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/avif,image/webp,image/apng,*<span class="hljs-comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-comment">Sec-Fetch-Site: none</span><br><span class="hljs-comment">Sec-Fetch-Mode: navigate</span><br><span class="hljs-comment">Sec-Fetch-User: ?1</span><br><span class="hljs-comment">Sec-Fetch-Dest: document</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate, br</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-comment">Cookie: didv=1644894188000; did=web_160a5eac2ed14dbda625edcf277953d1; sid=9995d540410efc97b28229c2; Hm_lvt_86a27b7db2c5c0ae37fee4a8a35033ee=1644894193; Hm_lpvt_86a27b7db2c5c0ae37fee4a8a35033ee=1645090238</span><br></code></pre></td></tr></table></figure><h2 id="响应（关键信息-window-pageData-x3D-）：略"><a href="#响应（关键信息-window-pageData-x3D-）：略" class="headerlink" title="响应（关键信息 window.pageData&#x3D;）：略"></a>响应（关键信息 window.pageData&#x3D;）：略</h2><h2 id="互动量相关-JSON-obfuseData："><a href="#互动量相关-JSON-obfuseData：" class="headerlink" title="互动量相关 JSON.obfuseData："></a>互动量相关 JSON.obfuseData：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">263</span>,<br>    <span class="hljs-string">&quot;fontCdnUrl&quot;</span>: <span class="hljs-string">&quot;https://tx2.a.kwimgs.com/kos/nlav10312/mdata/pkg/kwai-font/fontscn_263f9585.ttf&quot;</span>,<br>    <span class="hljs-string">&quot;fontCdnStyle&quot;</span>: <span class="hljs-string">&quot;&lt;style&gt;\n        @font-face &#123;\n            font-family: kwaiFont;\n            src: url(https://tx2.a.kwimgs.com/kos/nlav10312/mdata/pkg/kwai-font/fontscn_263f9585.ttf) format(\&quot;truetype\&quot;);\n        &#125;\n        .font &#123;\n            font-family: \&quot;kwaiFont\&quot;;\n            font-style: normal;\n            font-weight: normal;\n            font-variant: normal;\n            text-transform: none;\n            line-height: 1;\n            -webkit-font-smoothing: antialiased;\n        &#125;\n    &lt;/style&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;commentCount&quot;</span>: <span class="hljs-string">&quot;&lt;SPAN STYLE=&#x27;FONT-FAMILY: kwaiFont;&#x27;&gt;&lt;/SPAN&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;likeCount&quot;</span>: <span class="hljs-string">&quot;&lt;SPAN STYLE=&#x27;FONT-FAMILY: kwaiFont;&#x27;&gt;&lt;/SPAN&gt;&quot;</span>,<br>    <span class="hljs-string">&quot;viewCount&quot;</span>: <span class="hljs-string">&quot;&lt;SPAN STYLE=&#x27;FONT-FAMILY: kwaiFont;&#x27;&gt;&lt;/SPAN&gt;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="页面中显示："><a href="#页面中显示：" class="headerlink" title="页面中显示："></a>页面中显示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;p class=<span class="hljs-string">&quot;video-like&quot;</span>&gt;  &lt;span style=<span class="hljs-string">&quot;FONT-FAMILY: kwaiFont;&quot;</span>&gt;&lt;/span&gt;  &lt;/p&gt;<br></code></pre></td></tr></table></figure><p>可以明显看出是有<strong>字体反爬</strong>处理，需要下载字体文件进行解密</p><h1 id="什么是字体反爬？"><a href="#什么是字体反爬？" class="headerlink" title="什么是字体反爬？"></a>什么是字体反爬？</h1><p>使用自定义的 ttf 文件来渲染网页中的文字，而网页中的文字不再是文字，而是相应的字体编码，通过复制或者简单的采集是无法采集到编码后的文字内容</p><h2 id="字体反爬实现原理"><a href="#字体反爬实现原理" class="headerlink" title="字体反爬实现原理"></a>字体反爬实现原理</h2><p>厂商会随机生成成千上万套字库，并且保存好编码、字库文件、字的映射关系。文章显示的时候会从库中随机查询一套字库，并把文章中的替换成 unicode 编码，以达到字体加密的效果。</p><h1 id="字体反爬的前世今生"><a href="#字体反爬的前世今生" class="headerlink" title="字体反爬的前世今生"></a>字体反爬的前世今生</h1><h2 id="初级难度：一套字体做加密"><a href="#初级难度：一套字体做加密" class="headerlink" title="初级难度：一套字体做加密"></a>初级难度：一套字体做加密</h2><p>做好映射解密即可</p><h2 id="中级难度：生成多套字体和编码"><a href="#中级难度：生成多套字体和编码" class="headerlink" title="中级难度：生成多套字体和编码"></a>中级难度：生成多套字体和编码</h2><p>比如:<strong>猫眼电影,58 同城等等，汽车之家</strong><br>虽然生成了多套，但是每个字对应的字体信息是不变<br>比如一个字的笔画数，和 x,y 变化都很小，可以利用这个特征解析字体的 xml 文件，做特征映射</p><h2 id="高级难度：字体变形，字体信息随机化"><a href="#高级难度：字体变形，字体信息随机化" class="headerlink" title="高级难度：字体变形，字体信息随机化"></a>高级难度：字体变形，字体信息随机化</h2><p>比如：<strong>快手</strong></p><h1 id="静态字体解密"><a href="#静态字体解密" class="headerlink" title="静态字体解密"></a>静态字体解密</h1><h2 id="下载字体用-FontCeator-打开"><a href="#下载字体用-FontCeator-打开" class="headerlink" title="下载字体用 FontCeator 打开"></a>下载字体用 FontCeator 打开</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645674670513-87b8df4f-6ce8-452c-8080-d5fc3ecc798e.png#clientId=u1652befd-1cd7-4&from=paste&height=170&id=fvt5s&margin=%5Bobject%20Object%5D&name=image.png&originHeight=339&originWidth=1195&originalType=binary%E2%88%B6=1&size=37020&status=done&style=none&taskId=uee898422-626d-4619-b80c-f75f149de1a&width=597.5" alt="image.png"></p><h2 id="将字体文件转为-xml"><a href="#将字体文件转为-xml" class="headerlink" title="将字体文件转为 xml"></a>将字体文件转为 xml</h2><p>先用 FontCreator 将字体转为 woff 文件，再用 python 转为 xml</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;GlyphID id=<span class="hljs-string">&quot;0&quot;</span> name=<span class="hljs-string">&quot;.notdef&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;1&quot;</span> name=<span class="hljs-string">&quot;uniEAC6&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;2&quot;</span> name=<span class="hljs-string">&quot;uniEC96&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;3&quot;</span> name=<span class="hljs-string">&quot;uniF38C&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;4&quot;</span> name=<span class="hljs-string">&quot;uniF088&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;5&quot;</span> name=<span class="hljs-string">&quot;uniEC7E&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;6&quot;</span> name=<span class="hljs-string">&quot;uniF5D6&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;7&quot;</span> name=<span class="hljs-string">&quot;uniF20E&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;8&quot;</span> name=<span class="hljs-string">&quot;uniF7A6&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;9&quot;</span> name=<span class="hljs-string">&quot;uniF5B9&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;10&quot;</span> name=<span class="hljs-string">&quot;uniE9D5&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;11&quot;</span> name=<span class="hljs-string">&quot;uniE43E&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;12&quot;</span> name=<span class="hljs-string">&quot;uniE729&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;13&quot;</span> name=<span class="hljs-string">&quot;uniE47F&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;14&quot;</span> name=<span class="hljs-string">&quot;uniE7CA&quot;</span>/&gt;<br>&lt;GlyphID id=<span class="hljs-string">&quot;15&quot;</span> name=<span class="hljs-string">&quot;uniF6C7&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>注意：这个 xml 表示的是 id 和值的映射关系。比如 <GlyphID id="11" name="uniE43E"/><br>uniE43E 字体对应真实的值：4 ， 对应的 glyph11</p><h2 id="查看字体解密规则"><a href="#查看字体解密规则" class="headerlink" title="查看字体解密规则"></a>查看字体解密规则</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;commentCount&quot;</span>: <span class="hljs-string">&quot;&lt;SPAN STYLE=&#x27;FONT-FAMILY: kwaiFont;&#x27;&gt;&lt;/SPAN&gt;&quot;</span>,<br></code></pre></td></tr></table></figure><p><br>规则：&amp;#+16 进制加上;号</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>逆推字体加密<br>将字体的 key 转为 16 进制，&amp;#+16 进制与加密的对比，得到对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[ #编写对应的列表<br>    <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span><br>]<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">fontCdnUrl = <span class="hljs-string">&quot;https://tx2.a.kwimgs.com/kos/nlav10312/mdata/pkg/kwai-font/fontscn_263f9585.ttf&quot;</span><br>key_map = &#123;&#125;<br><br>font_content = requests.get(fontCdnUrl).<span class="hljs-type">content</span><br><span class="hljs-variable">font</span> <span class="hljs-operator">=</span> TTFont(BytesIO(font_content))<br>code = font.getGlyphOrder()[<span class="hljs-number">1</span>:]<br>nums = [<br>    <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>,<br>    <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span><br>]<br>temp = dict(zip(code, nums))<br>res = font.getBestCmap()<br><span class="hljs-keyword">for</span> k, v in res.items(): #解析字体<br>    print(<span class="hljs-string">&quot;字体的原始：&quot;</span> +str(k))<br>    kk = str(hex(k))<br>    print(<span class="hljs-string">&quot;字体的转换成16进制：&quot;</span> + str(kk))<br>    kk = kk[<span class="hljs-number">1</span>:]<br>    print(<span class="hljs-string">&quot;去除前缀：&quot;</span> + str(kk))<br>    kk =<span class="hljs-string">&#x27;&amp;#&#x27;</span> + kk<br>    <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-string">&quot;拼接&amp;#得到最后加密的：&quot;</span> + str(kk)</span>)<br>    print(str(v)+<span class="hljs-string">&quot;字体对应真实的值：&quot;</span> + str(temp[v]))<br>    key_map[kk] = temp[v]<br>re_html_code = re.compile(r<span class="hljs-string">&#x27;&amp;#x[\da-f]&#123;4&#125;&#x27;</span>)<br>text = <span class="hljs-string">&quot;&quot;</span>  #7751confusionLikeCount=<br>words = re_html_code.findall(text)<br>result = <span class="hljs-string">&#x27;&#x27;</span>.join(key_map[i] <span class="hljs-keyword">for</span> i in words)<br>print(result)<br></code></pre></td></tr></table></figure><p>得到 7762， 静态字体破解搞定~</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="动态字体解密"><a href="#动态字体解密" class="headerlink" title="动态字体解密"></a>动态字体解密</h1><p>每次请求的字体都不一样<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645689003491-85cab0c6-f6f1-472d-92ef-7917f46b22ff.png#clientId=u10da156e-2811-4&from=paste&height=337&id=u92a0e3d9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=673&originWidth=1315&originalType=binary%E2%88%B6=1&size=68780&status=done&style=none&taskId=u86848edb-5263-47ec-957a-89923f7d2bc&width=657.5" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645756969520-f17d77e1-fdc6-4c49-aba8-2f2e1efc0471.png#clientId=u0fb3019f-4b33-4&from=paste&height=307&id=u6db364a4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=614&originWidth=495&originalType=binary%E2%88%B6=1&size=37969&status=done&style=none&taskId=u43618a62-3c05-45f4-a6d8-d73ae9c5c5d&width=247.5" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645757027875-439caa89-4b83-490e-9af8-3ccef99e63f7.png#clientId=u0fb3019f-4b33-4&from=paste&height=307&id=u81403d77&margin=%5Bobject%20Object%5D&name=image.png&originHeight=613&originWidth=407&originalType=binary%E2%88%B6=1&size=32740&status=done&style=none&taskId=u570b17d7-45ca-4ff5-8d87-8abd6b7fb71&width=203.5" alt="image.png"><br>可以发现字体的形状不同，无法通过笔画来映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;pt x=<span class="hljs-string">&quot;-10158&quot;</span> y=<span class="hljs-string">&quot;550&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10154&quot;</span> y=<span class="hljs-string">&quot;545&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10161&quot;</span> y=<span class="hljs-string">&quot;534&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10160&quot;</span> y=<span class="hljs-string">&quot;350&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10490&quot;</span> y=<span class="hljs-string">&quot;54&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10492&quot;</span> y=<span class="hljs-string">&quot;27&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10492&quot;</span> y=<span class="hljs-string">&quot;5&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10285&quot;</span> y=<span class="hljs-string">&quot;0&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10156&quot;</span> y=<span class="hljs-string">&quot;4&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10031&quot;</span> y=<span class="hljs-string">&quot;-5&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10035&quot;</span> y=<span class="hljs-string">&quot;16&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10029&quot;</span> y=<span class="hljs-string">&quot;58&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10034&quot;</span> y=<span class="hljs-string">&quot;87&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10232&quot;</span> y=<span class="hljs-string">&quot;75&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10236&quot;</span> y=<span class="hljs-string">&quot;87&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10256&quot;</span> y=<span class="hljs-string">&quot;83&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10300&quot;</span> y=<span class="hljs-string">&quot;83&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10323&quot;</span> y=<span class="hljs-string">&quot;77&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10356&quot;</span> y=<span class="hljs-string">&quot;78&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10116&quot;</span> y=<span class="hljs-string">&quot;306&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10077&quot;</span> y=<span class="hljs-string">&quot;472&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10071&quot;</span> y=<span class="hljs-string">&quot;499&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10066&quot;</span> y=<span class="hljs-string">&quot;529&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10070&quot;</span> y=<span class="hljs-string">&quot;610&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10110&quot;</span> y=<span class="hljs-string">&quot;665&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10119&quot;</span> y=<span class="hljs-string">&quot;688&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10124&quot;</span> y=<span class="hljs-string">&quot;692&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10156&quot;</span> y=<span class="hljs-string">&quot;716&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10201&quot;</span> y=<span class="hljs-string">&quot;737&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10237&quot;</span> y=<span class="hljs-string">&quot;742&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10282&quot;</span> y=<span class="hljs-string">&quot;743&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10394&quot;</span> y=<span class="hljs-string">&quot;740&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10497&quot;</span> y=<span class="hljs-string">&quot;632&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10442&quot;</span> y=<span class="hljs-string">&quot;594&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10441&quot;</span> y=<span class="hljs-string">&quot;592&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10372&quot;</span> y=<span class="hljs-string">&quot;671&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10293&quot;</span> y=<span class="hljs-string">&quot;672&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10226&quot;</span> y=<span class="hljs-string">&quot;677&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10191&quot;</span> y=<span class="hljs-string">&quot;630&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-10163&quot;</span> y=<span class="hljs-string">&quot;603&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;pt x=<span class="hljs-string">&quot;-9192&quot;</span> y=<span class="hljs-string">&quot;740&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9129&quot;</span> y=<span class="hljs-string">&quot;740&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9114&quot;</span> y=<span class="hljs-string">&quot;755&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9099&quot;</span> y=<span class="hljs-string">&quot;746&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9037&quot;</span> y=<span class="hljs-string">&quot;747&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8991&quot;</span> y=<span class="hljs-string">&quot;706&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8986&quot;</span> y=<span class="hljs-string">&quot;698&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8973&quot;</span> y=<span class="hljs-string">&quot;696&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8973&quot;</span> y=<span class="hljs-string">&quot;695&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8975&quot;</span> y=<span class="hljs-string">&quot;695&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8917&quot;</span> y=<span class="hljs-string">&quot;624&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8920&quot;</span> y=<span class="hljs-string">&quot;525&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8920&quot;</span> y=<span class="hljs-string">&quot;337&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9203&quot;</span> y=<span class="hljs-string">&quot;69&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9180&quot;</span> y=<span class="hljs-string">&quot;74&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9159&quot;</span> y=<span class="hljs-string">&quot;75&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9102&quot;</span> y=<span class="hljs-string">&quot;79&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9086&quot;</span> y=<span class="hljs-string">&quot;83&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9016&quot;</span> y=<span class="hljs-string">&quot;81&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8878&quot;</span> y=<span class="hljs-string">&quot;77&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8881&quot;</span> y=<span class="hljs-string">&quot;66&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8882&quot;</span> y=<span class="hljs-string">&quot;13&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8881&quot;</span> y=<span class="hljs-string">&quot;-3&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-8917&quot;</span> y=<span class="hljs-string">&quot;-1&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9346&quot;</span> y=<span class="hljs-string">&quot;2&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9340&quot;</span> y=<span class="hljs-string">&quot;50&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9345&quot;</span> y=<span class="hljs-string">&quot;58&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9008&quot;</span> y=<span class="hljs-string">&quot;348&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9006&quot;</span> y=<span class="hljs-string">&quot;534&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9003&quot;</span> y=<span class="hljs-string">&quot;552&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9008&quot;</span> y=<span class="hljs-string">&quot;574&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9016&quot;</span> y=<span class="hljs-string">&quot;607&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9036&quot;</span> y=<span class="hljs-string">&quot;635&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9049&quot;</span> y=<span class="hljs-string">&quot;639&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9063&quot;</span> y=<span class="hljs-string">&quot;648&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9072&quot;</span> y=<span class="hljs-string">&quot;660&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9080&quot;</span> y=<span class="hljs-string">&quot;658&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9077&quot;</span> y=<span class="hljs-string">&quot;662&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9083&quot;</span> y=<span class="hljs-string">&quot;669&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9107&quot;</span> y=<span class="hljs-string">&quot;671&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9144&quot;</span> y=<span class="hljs-string">&quot;676&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9163&quot;</span> y=<span class="hljs-string">&quot;678&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9187&quot;</span> y=<span class="hljs-string">&quot;672&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9206&quot;</span> y=<span class="hljs-string">&quot;651&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9229&quot;</span> y=<span class="hljs-string">&quot;648&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9263&quot;</span> y=<span class="hljs-string">&quot;626&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9293&quot;</span> y=<span class="hljs-string">&quot;586&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9314&quot;</span> y=<span class="hljs-string">&quot;600&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9326&quot;</span> y=<span class="hljs-string">&quot;628&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9349&quot;</span> y=<span class="hljs-string">&quot;639&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9304&quot;</span> y=<span class="hljs-string">&quot;686&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9259&quot;</span> y=<span class="hljs-string">&quot;716&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9251&quot;</span> y=<span class="hljs-string">&quot;717&quot;</span> on=<span class="hljs-string">&quot;0&quot;</span>/&gt;<br>       &lt;pt x=<span class="hljs-string">&quot;-9242&quot;</span> y=<span class="hljs-string">&quot;719&quot;</span> on=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>经过下载多个字体文件查看，发现如下：</p><ul><li>每次请求都是不同的字体，字体库不是简单的几套</li><li>笔画数不同</li><li>x,y 坐标不同，并且移动很大</li></ul><p>所以无法通过解析字体的 xml 利用有规律的特征来做映射</p><h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>将获取到的加密字段自己组装成 html 显示后，截图，ocr 识别出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-family</span>: kwaiFont;</span><br><span class="language-css">    <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://tx2.a.kwimgs.com/kos/nlav10312/mdata/pkg/kwai-font/fontscn_28789ff8.ttf</span>)</span><br><span class="language-css">      <span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;truetype&quot;</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.font</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;kwaiFont&quot;</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">    <span class="hljs-attribute">font-variant</span>: normal;</span><br><span class="language-css">    <span class="hljs-attribute">text-transform</span>: none;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">    -webkit-<span class="hljs-attribute">font-smoothing</span>: antialiased;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">STYLE</span>=<span class="hljs-string">&quot;FONT-FAMILY: kwaiFont;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645773077034-664067aa-d97f-4459-be6d-ae1696d7b079.png#clientId=u1c35ade9-6362-4&from=paste&height=52&id=u0291bcea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=104&originWidth=798&originalType=binary%E2%88%B6=1&size=9949&status=done&style=none&taskId=u5f27e365-4b12-4cef-9151-1064868478c&width=399" alt="image.png"></p><h3 id="保存为-html"><a href="#保存为-html" class="headerlink" title="保存为 html"></a>保存为 html</h3><p>略</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>略</p><h3 id="OCR-识别"><a href="#OCR-识别" class="headerlink" title="OCR 识别"></a>OCR 识别</h3><p>略</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>将字体文件字体分割为 png，ocr 识别成出来。放入集合按顺序排列</p><h3 id="下载安装-tesseract-ocr"><a href="#下载安装-tesseract-ocr" class="headerlink" title="下载安装 tesseract-ocr"></a>下载安装 tesseract-ocr</h3><h3 id="下载语言包"><a href="#下载语言包" class="headerlink" title="下载语言包"></a>下载语言包</h3><p><a href="https://tesseract-ocr.github.io/tessdoc/Data-Files">https://tesseract-ocr.github.io/tessdoc/Data-Files</a><br>放入 Tesseract-OCR\tessdata</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><h3 id="将字体切割成图片代码"><a href="#将字体切割成图片代码" class="headerlink" title="将字体切割成图片代码"></a>将字体切割成图片代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">def uni_2_png_stream(txt, font, img_size=512): &quot;&quot;&quot;将字形转化为图片流 Args: txt<br>([type]): [description] font ([type]): [description] img_size (int, optional):<br>[description]. Defaults to 512. Returns: [type]: [description] &quot;&quot;&quot; img =<br>Image.new(&#x27;1&#x27;, (img_size, img_size), 255) draw = ImageDraw.Draw(img) font =<br>ImageFont.truetype(font, int(img_size * 0.7)) txt = chr(txt) x, y =<br>draw.textsize(txt, font=font) draw.text(((img_size - x) // 2, (img_size - y) //<br>2), txt, font=font, fill=0) # draw.text((0,0), txt, font=font, fill=0) return<br>img<br></code></pre></td></tr></table></figure><h3 id="对比-ocr-效果"><a href="#对比-ocr-效果" class="headerlink" title="对比 ocr 效果"></a>对比 ocr 效果</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646013696797-60dba5bf-7be5-4047-9ddf-aaf9f8db14e0.png#clientId=u211035ad-afac-4&from=paste&height=225&id=u0b24eb20&margin=%5Bobject%20Object%5D&name=image.png&originHeight=450&originWidth=1683&originalType=binary%E2%88%B6=1&size=61090&status=done&style=none&taskId=uf9f87274-a55c-4ed7-8436-1ad6a917c2b&width=841.5" alt="image.png"><br>uniE43E 字体对应真实的值：4<br>uniE47F 字体对应真实的值：9<br>uniE729 字体对应真实的值：8<br>uniE7CA 字体对应真实的值：7<br>uniE9D5 字体对应真实的值：0<br>uniEAC6 字体对应真实的值：w<br>uniEC7E 字体对应真实的值：6<br>uniEC96 字体对应真实的值：D<br>uniF088 字体对应真实的值：k<br>uniF20E 字体对应真实的值：1<br>uniF38C 字体对应真实的值：m<br>uniF5B9 字体对应真实的值：+<br>uniF5D6 字体对应真实的值：.<br>uniF6C7 字体对应真实的值：2<br>uniF7A6 字体对应真实的值：3</p><p>可以看出来识别率 90%，数字 5 识别成 D 了。</p><h3 id="优化数字识别率-和-ocr-执行时间"><a href="#优化数字识别率-和-ocr-执行时间" class="headerlink" title="优化数字识别率 和 ocr 执行时间"></a>优化数字识别率 和 ocr 执行时间</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">pytesseract.pytesseract.tesseract_cmd = filename # text =<br>pytesseract.image_to_string(image, lang=&#x27;chi_sim&#x27;, config=&#x27;--psm 10&#x27;) # 注意<br>这里替换语言库，提升纯数字识别准确率 和 执行时间 11秒 提升到6秒 text =<br>pytesseract.image_to_string(image, config=&#x27;--psm 10&#x27;)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646018712079-63fb9897-24a8-4b7a-b11b-0a3e99afd54d.png#clientId=u211035ad-afac-4&from=paste&height=227&id=u4e9703cd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=453&originWidth=1648&originalType=binary%E2%88%B6=1&size=61563&status=done&style=none&taskId=u7f99611a-6f09-47d5-9d9c-5338d281dd4&width=824" alt="image.png"><br>测试了几个 font 文件，数字识别率 100%</p><h1 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h1><h2 id="tesseract："><a href="#tesseract：" class="headerlink" title="tesseract："></a>tesseract：</h2><p>nums:[‘Ww’, ‘+’, ‘4’, ‘9’, ‘2’, ‘6’, ‘mM’, ‘8’, ‘’, ‘7’, ‘3’, ‘k’, ‘5’, ‘0’, ‘1’]<br>INFO: 127.0.0.1:2629 - “GET &#x2F;api&#x2F;ks_interactive_data&#x2F;3xdyxk622whqx2q HTTP&#x2F;1.1” 200 OK<br>2022-03-01 12:28:14.721 | WARNING | utils:ocr_processor:146 - 识别耗时：2227.240800857544<br>2022-03-01 12:28:14.722 | WARNING | <strong>main</strong>:request:123 - result:0_2_65<br>2022-03-01 12:28:14.723 | WARNING | <strong>main</strong>:request:124 - 耗时:3415.691375732422</p><h2 id="更换-ocr-识别后："><a href="#更换-ocr-识别后：" class="headerlink" title="更换 ocr 识别后："></a>更换 ocr 识别后：</h2><p>2022-03-01 12:31:36.279 | WARNING | utils:ocr_processor:146 - 识别耗时：131.30450248718262<br>nums:[‘’, ‘7’, ‘w’, ‘2’, ‘0’, ‘9’, ‘6’, ‘3’, ‘十’, ‘4’, ‘8’, ‘5’, ‘k’, ‘1’, ‘m’]<br>INFO: 127.0.0.1:2923 - “GET &#x2F;api&#x2F;ks_interactive_data&#x2F;3xdyxk622whqx2q HTTP&#x2F;1.1” 200 OK<br>2022-03-01 12:31:36.290 | WARNING | <strong>main</strong>:request:123 - result:0_2_65<br>2022-03-01 12:31:36.290 | WARNING | <strong>main</strong>:request:124 - 耗时:1669.9013710021973</p><h1 id="DID-风控解决"><a href="#DID-风控解决" class="headerlink" title="DID 风控解决"></a>DID 风控解决</h1><p>待下篇分解</p><h2 id="大规模测试："><a href="#大规模测试：" class="headerlink" title="大规模测试："></a>大规模测试：</h2><p><strong>10 个线程，单 IP，5 个小时一共跑了 62264 次，失败次数 3266，成功率 94%</strong></p><p><strong>平均一个小时 12452 次。</strong></p><p><strong>单个请求 2 秒以内完成。1 秒 4 和 1 秒 8 居多，通过 redis 预存 did 的话，可以进一步提升耗时到 1 秒以内。</strong></p><p>警告：仅供学习和参考，不可用于非法用途！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pixel 3a（sargo）刷机</title>
    <link href="/2022/02/24/yuque/pixel%203a%EF%BC%88sargo%EF%BC%89%E5%88%B7%E6%9C%BA/"/>
    <url>/2022/02/24/yuque/pixel%203a%EF%BC%88sargo%EF%BC%89%E5%88%B7%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="twrp-官网-devices-下载对应版本的-twrp-img-和-zip"><a href="#twrp-官网-devices-下载对应版本的-twrp-img-和-zip" class="headerlink" title="twrp 官网 devices 下载对应版本的 twrp img 和 zip"></a>twrp 官网 devices 下载对应版本的 twrp img 和 zip</h1><p>img 为临时 twrp<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1645668514390-78640d53-cba7-43a9-b36b-d6e45fc790c9.png#clientId=u255e42db-bb00-4&from=paste&height=361&id=ud13a490e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=721&originWidth=830&originalType=binary%E2%88%B6=1&size=112655&status=done&style=none&taskId=u7cbf71eb-5417-422e-945d-b61c355f65f&width=415" alt="image.png"><br>选择最后一个。3.6.0 测试会失败，原因未知。</p><h1 id="adb-reboot-bootloader-在-bootloader-模式下"><a href="#adb-reboot-bootloader-在-bootloader-模式下" class="headerlink" title="adb reboot bootloader 在 bootloader 模式下"></a>adb reboot bootloader 在 bootloader 模式下</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">PS E:\rom\twrp&gt; fastboot boot .\twrp-<span class="hljs-number">3.3</span><span class="hljs-number">.1</span>-<span class="hljs-number">0</span>-sargo.img<br>Sending <span class="hljs-string">&#x27;boot.img&#x27;</span> (<span class="hljs-number">65536</span> KB)                      OKAY [  <span class="hljs-number">2.</span>012s]<br>Booting                                            OKAY [  <span class="hljs-number">5.</span>911s]<br>Finished. Total time: <span class="hljs-number">7.</span>970s<br></code></pre></td></tr></table></figure><h1 id="adb-push-zip-到-x2F-sdcard"><a href="#adb-push-zip-到-x2F-sdcard" class="headerlink" title="adb push zip 到&#x2F;sdcard"></a>adb push zip 到&#x2F;sdcard</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">PS E:\rom\twrp&gt; adb push .\twrp-installer-<span class="hljs-number">3.3</span><span class="hljs-number">.1</span>-<span class="hljs-number">1</span>-sargo.zip /sdcard<br>.\twrp-installer-<span class="hljs-number">3.3</span><span class="hljs-number">.1</span>-<span class="hljs-number">1</span>-sargo.zip: <span class="hljs-number">1</span> file pushed, <span class="hljs-number">0</span> skipped. <span class="hljs-number">69.3</span> MB/s (<span class="hljs-number">10103558</span> bytes in <span class="hljs-number">0.</span>139s)<br>PS E:\rom\twrp&gt;<br></code></pre></td></tr></table></figure><h1 id="在-twrp-中-install-选择-zip-包进行安装"><a href="#在-twrp-中-install-选择-zip-包进行安装" class="headerlink" title="在 twrp 中 install 选择 zip 包进行安装"></a>在 twrp 中 install 选择 zip 包进行安装</h1><p>reboot system， 选择 do not install ok 完成~ twrp 的输入</p><h1 id="安装面具"><a href="#安装面具" class="headerlink" title="安装面具"></a>安装面具</h1><p>安装 magisk.apk . 选择修补一个文件，选择 rom 解压出来的 boot.img<br>修补后会在 boot.img 的同文件夹下生成一个 magisk_patched.img 文件，传回电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">adb reboot bootloader<br>fastboot flash boot magisk_patched-23000_PUUwu.img<br>fastboot reboot<br></code></pre></td></tr></table></figure><p>安装 magisk<br>完成~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>playwright python实践经验</title>
    <link href="/2022/02/15/yuque/playwright%20python%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C/"/>
    <url>/2022/02/15/yuque/playwright%20python%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h1><ul><li>query_selector(engine&#x3D;body) # 选择单个元素</li><li>query_selectorAll(engine&#x3D;body) # 选择多个元素</li><li>wait_for_selector(engine&#x3D;body) # 选择单个元素，并且自动等待到元素可见、可操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span> 以 <span class="hljs-comment">// 或 / 或者 .. 开头的，判断为xpath</span><br><br>pp = page.query_selector(<span class="hljs-string">&quot;xpath=//h2&quot;</span>)<br><br>pp = page.query_selector(<span class="hljs-string">&quot;//h2&quot;</span>)<br><br><span class="hljs-number">2.</span> 以引号 <span class="hljs-string">&quot;&quot;</span> 或者 <span class="hljs-string">&#x27; 开头的，判断为text</span><br><span class="hljs-string"></span><br><span class="hljs-string">ppp = page.query_selector(&quot;text=文本输入&quot;) \</span><br><span class="hljs-string"></span><br><span class="hljs-string">ppp = page.query_selector(&quot;&#x27;</span>文本输入<span class="hljs-string">&#x27;&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">注意：双引号里有一个单引号，不然无法识别</span><br><span class="hljs-string"></span><br><span class="hljs-string">3. 其他的，都判断为css</span><br><span class="hljs-string"></span><br><span class="hljs-string">p = page.query_selector(&quot;css=h2&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">p = page.query_selector(&quot;h2&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="打印元素-html，方便定位测试"><a href="#打印元素-html，方便定位测试" class="headerlink" title="打印元素 html，方便定位测试"></a>打印元素 html，方便定位测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>element_handle.inner_html()<br>returns: &lt;str&gt;#<br>Returns the element.innerHTML.<br>element_handle.inner_text()<br></code></pre></td></tr></table></figure><p>参考：<a href="http://blog.itpub.net/69942496/viewspace-2765795/">http://blog.itpub.net/69942496/viewspace-2765795/</a></p><h1 id="如何使用-mobile-仿真模式，支持-touch-事件"><a href="#如何使用-mobile-仿真模式，支持-touch-事件" class="headerlink" title="如何使用 mobile 仿真模式，支持 touch 事件"></a>如何使用 mobile 仿真模式，支持 touch 事件</h1><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a><a href="https://github.com/puppeteer/puppeteer">puppeteer</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">devtoolsProtocolClient</span> <span class="hljs-operator">=</span> await page.target().createCDPSession();<br>await devtoolsProtocolClient.send(<span class="hljs-string">&quot;Emulation.setEmitTouchEventsForMouse&quot;</span>, &#123; enabled: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><h3 id="playwright"><a href="#playwright" class="headerlink" title="playwright"></a>playwright</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">client = page.context.new_cdp_session(page)<br>client.send(<span class="hljs-string">&quot;Emulation.setEmitTouchEventsForMouse&quot;</span>,&#123;<span class="hljs-string">&quot;enabled&quot;</span>:True&#125;)<br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/puppeteer/puppeteer/issues/1079">https://github.com/puppeteer/puppeteer/issues/1079</a></p><h1 id="执行-js"><a href="#执行-js" class="headerlink" title="执行 js"></a>执行 js</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">page.evaluate(<span class="hljs-string">&quot;success()&quot;</span>)<br>page.evaluate(<span class="hljs-string">&#x27;document.querySelectorAll(&quot;.add&quot;)[&#x27;</span> + str(i) + <span class="hljs-string">&#x27;].click()&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>平头哥sshdroid实践</title>
    <link href="/2022/02/14/yuque/%E5%B9%B3%E5%A4%B4%E5%93%A5sshdroid%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/02/14/yuque/%E5%B9%B3%E5%A4%B4%E5%93%A5sshdroid%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="平头哥-sshdroid-实践"><a href="#平头哥-sshdroid-实践" class="headerlink" title="平头哥 sshdroid 实践"></a>平头哥 sshdroid 实践</h1><p>给 android app 提供的一个 sshd 服务，起主要作用是提供一个交互式的 shell 工具，<br>我们可以通过他访问 app 的内部数据文件。</p><ul><li>修改 app&#x2F;src&#x2F;main&#x2F;assets&#x2F;config.properties 的包名</li><li>安装插件</li><li>adb forward tcp:3479 tcp:3479</li><li>ssh 127.0.0.1 -p 3479 登陆 shell</li><li>cd &#x2F;data&#x2F;user&#x2F;0&#x2F;com.smile.gifmaker&#x2F;app_ratel_env_mock</li><li>ls</li></ul><p>需要注意的点：命令执行不会回显也没有补全，通过 ls 判断是否进入目录即可<br>enjoy~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cd /data/user/<span class="hljs-number">0</span>/com.smile.gifmaker/app_ratel_env_mock/c1/cache<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ja3深入研究</title>
    <link href="/2022/02/10/yuque/ja3%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/"/>
    <url>/2022/02/10/yuque/ja3%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<p>ja3 深入研究<br><a href="https://mp.weixin.qq.com/s/-i730kN_f5sIvh6kj7k5JQ">https://mp.weixin.qq.com/s/-i730kN_f5sIvh6kj7k5JQ</a></p><p>python 的完美解决方案：<a href="https://github.com/lwthiker/curl-impersonate">https://github.com/lwthiker/curl-impersonate</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>unidgb学习笔记</title>
    <link href="/2022/02/10/yuque/unidgb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/02/10/yuque/unidgb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第一课绿洲"><a href="#第一课绿洲" class="headerlink" title="第一课绿洲"></a>第一课绿洲</h1><h2 id="搜索导出函数"><a href="#搜索导出函数" class="headerlink" title="搜索导出函数"></a>搜索导出函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646368070883-968d933b-0249-4583-8fa3-02f8bfaacf23.png#clientId=u8c76a3ec-4065-4&from=paste&height=308&id=u690aef8d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=615&originWidth=379&originalType=binary%E2%88%B6=1&size=8018&status=done&style=none&taskId=uf7f3cd14-f3f3-4aeb-b498-8a8aaa911be&width=189.5" alt="image.png"><br>说明不是静态绑定<br>去 jni_Onload 看看<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646368477063-d65734bb-541b-4f2b-804e-e149f747abf7.png#clientId=u8c76a3ec-4065-4&from=paste&height=384&id=udd2fccdc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=767&originWidth=1237&originalType=binary%E2%88%B6=1&size=91007&status=done&style=none&taskId=u6ca4f2eb-9ec2-41d4-9b72-5eec9fee7a4&width=618.5" alt="image.png"><br>被混淆了。</p><h1 id="上-unidgb"><a href="#上-unidgb" class="headerlink" title="上 unidgb"></a>上 unidgb</h1><h1 id="用-findhash-找下算法"><a href="#用-findhash-找下算法" class="headerlink" title="用 findhash 找下算法"></a>用 findhash 找下算法</h1><ul><li>把 findhash.xml 和 findhash.py 扔到 ida plugins 目录下</li><li>ida -edit-plugin-findhash</li><li><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646382421162-661e9372-523a-4f83-b1d7-b4ee5aba136d.png#clientId=u75aa53a9-3dde-4&from=paste&height=33&id=ub100e31a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=65&originWidth=317&originalType=binary%E2%88%B6=1&size=1814&status=done&style=none&taskId=u40194255-304a-4480-a2ba-dfedce3b4ab&width=158.5" alt="image.png"></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646382573364-e7095f60-e558-4e66-8831-0ec8df00b997.png#clientId=u75aa53a9-3dde-4&from=paste&height=167&id=ub75dcd22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=333&originWidth=1417&originalType=binary%E2%88%B6=1&size=80077&status=done&style=none&taskId=u85d2abfa-6cd7-4031-b2e3-9bb2b4485bd&width=708.5" alt="image.png"></p><h1 id="第二课微博"><a href="#第二课微博" class="headerlink" title="第二课微博"></a>第二课微博</h1><h2 id="java-层三个参数"><a href="#java-层三个参数" class="headerlink" title="java 层三个参数"></a>java 层三个参数</h2><h1 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646385583320-7e0ebabf-8d90-4ecf-848e-968560b2b999.png#clientId=u75aa53a9-3dde-4&from=paste&height=34&id=u7a264a6e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=67&originWidth=907&originalType=binary%E2%88%B6=1&size=16687&status=done&style=none&taskId=uc640b6c0-ec32-41a6-998c-c0dc14985ad&width=453.5" alt="image.png"></h1><h2 id="so-层-5-个参数"><a href="#so-层-5-个参数" class="headerlink" title="so 层 5 个参数"></a>so 层 5 个参数</h2><p>Java_com_sina_weibo_security_WeiboSecurityUtils_calculateS<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646385474262-de466b22-e8db-42e9-8ea1-a3454d1d92a1.png#clientId=u75aa53a9-3dde-4&from=paste&height=20&id=ud60b64a8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=39&originWidth=592&originalType=binary%E2%88%B6=1&size=7595&status=done&style=none&taskId=ub994529b-44a7-4ac3-9818-22d6db05e06&width=296" alt="image.png"></p><p>WeiboSecurityUtils_calculateS(int a1, int a2, int a3, int a4, int a5)<br>&#x2F;&#x2F; 第一个参数是 env<br>&#x2F;&#x2F; 第二个参数，实例方法是 jobject，静态方法是 jclazz，直接填 0，一般用不到。</p><h2 id="识别-JNIEnv"><a href="#识别-JNIEnv" class="headerlink" title="识别 JNIEnv"></a>识别 JNIEnv</h2><p>**在第一个 int 参数上按 y，输入 JNIEnv* **， jni 的 api 就被识别出来了<br>按 N 在其他参数上重命名</p><h2 id="查看静态绑定的地址-1："><a href="#查看静态绑定的地址-1：" class="headerlink" title="查看静态绑定的地址+1："></a>查看静态绑定的地址+1：</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646385917488-9d416676-be89-4cf6-b5f3-454cb1813fe2.png#clientId=u75aa53a9-3dde-4&from=paste&height=15&id=u628e0e75&margin=%5Bobject%20Object%5D&name=image.png&originHeight=29&originWidth=775&originalType=binary%E2%88%B6=1&size=5866&status=done&style=none&taskId=u1ada1490-84f0-460d-87bf-c83790e43aa&width=387.5" alt="image.png"><br>Thumb 指令需要+1，否则执行会报错。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646386207918-a48af625-32d1-41cb-845a-c7541b4ca0fe.png#clientId=u75aa53a9-3dde-4&from=paste&height=32&id=u02e1dc17&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=882&originalType=binary%E2%88%B6=1&size=9093&status=done&style=none&taskId=ubca1e92d-583e-4626-99bb-8b02394a6db&width=441" alt="image.png"><br>0x1E7C + 1</p><h1 id="context-如何构造"><a href="#context-如何构造" class="headerlink" title="context 如何构造"></a>context 如何构造</h1><p>DvmObject&lt;?&gt; context &#x3D; vm.resolveClass(“android&#x2F;content&#x2F;Context”).newObject(null);&#x2F;&#x2F; context</p><h1 id="字符串类型如何构造"><a href="#字符串类型如何构造" class="headerlink" title="字符串类型如何构造"></a>字符串类型如何构造</h1><p>list.add(vm.addLocalObject(context));<br>list.add(vm.addLocalObject(new StringObject(vm, “12345”)));<br>list.add(vm.addLocalObject(new StringObject(vm, “r0ysue”)));</p><p><strong>除了基本类型，比如 int，long 等，其他的对象类型一律要手动 addLocalObject</strong></p><h1 id="运行报错"><a href="#运行报错" class="headerlink" title="运行报错"></a>运行报错</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646404608662-698c4651-f192-4fc4-8b5d-2e5282bf029e.png#clientId=u15db014e-5b2a-4&from=paste&height=40&id=uc32ccb02&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=1033&originalType=binary%E2%88%B6=1&size=11034&status=done&style=none&taskId=u1f464e41-b27c-406b-b035-99cf9f7c075&width=516.5" alt="image.png"><br>运行下。0x2c8d 按 G 定位查看<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646404719076-9ebf090d-6e41-4e62-bafa-a31957ee54cc.png#clientId=u15db014e-5b2a-4&from=paste&height=315&id=udaa0b4b5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=629&originWidth=1220&originalType=binary%E2%88%B6=1&size=60168&status=done&style=none&taskId=u24553857-b9c4-4f58-800a-ec07a3d4d79&width=610" alt="image.png"><br>按 x 查看交叉应用定位到 sub_1C60</p><h1 id="unidgb-打-patch-绕过签名校验"><a href="#unidgb-打-patch-绕过签名校验" class="headerlink" title="unidgb 打 patch 绕过签名校验"></a>unidgb 打 patch 绕过签名校验</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646386752748-fe23f521-b5cd-4721-a203-6dc15063fd4d.png#clientId=u75aa53a9-3dde-4&from=paste&height=40&id=u8f470b48&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=365&originalType=binary%E2%88%B6=1&size=3261&status=done&style=none&taskId=u5b5bb91b-8c0e-4cbc-b94e-b46e2be4ebd&width=182.5" alt="image.png"><br>这个判断疑似在校验签名<br>根据 ARM 调用约定，入参前四个分别通过 R0-R3 调用，返回值通过 R0 返回<br>mov r0,1 <a href="https://armconverter.com/">https://armconverter.com/</a>一下 4FF00100<br>ida textview 查看偏移地址：<img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646404328887-6a7fea05-f863-4a8f-b84f-2a598c516c7a.png#clientId=u15db014e-5b2a-4&from=paste&height=22&id=u608ab82b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=43&originWidth=758&originalType=binary%E2%88%B6=1&size=4552&status=done&style=none&taskId=ub9f30953-c922-461d-b880-f68fbab45aa&width=379" alt="image.png"><br>module.base + 0x1E86</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">int patchCode = 0x4FF00100; // emulator.getMemory().pointer(module.base +<br>0x1E86).setInt(0,patchCode);<br></code></pre></td></tr></table></figure><p><strong>需要注意的是，这儿地址可别+1 了，Thumb 的+1 只在运行和 Hook 时需要考虑，打 Patch 可别想。</strong></p><h1 id="借助-unidgb-分析算法"><a href="#借助-unidgb-分析算法" class="headerlink" title="借助 unidgb 分析算法"></a>借助 unidgb 分析算法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html">//初始化2个字符串。key和bytes inputBytesKey = (*a1)-&gt;GetStringUTFChars(a1,<br>inputKey, 0); inputBytesStr = (char *)(*a1)-&gt;GetStringUTFChars(a1, inputBytes,<br>0); v7 = j_strlen(inputBytesStr); v8 = v7 + j_strlen(inputBytesKey) + 1;<br>inputBytesStr2 = j_malloc(v8); j_memset(inputBytesStr2, 0, v8); j_strcpy((char<br>*)inputBytesStr2, inputBytesStr); j_strcat((char *)inputBytesStr2,<br>inputBytesKey); //C 库函数 - strcat() 拼接key和bytestr result = (_BYTE<br>*)MDStringOld(inputBytesStr2); //传入MD方法做运算 v11 = (char *)j_malloc(9u);<br>//创建字符串v11 *v11 = result[1]; v11[1] = result[5]; v11[2] = result[2]; v11[3]<br>= result[10]; v11[4] = result[17]; v11[5] = result[9]; v11[6] = result[25]; v12<br>= result[27]; v11[8] = 0; v11[7] = v12; //将结果的1,5,2，10,17,9,25,27位取出来<br>//下面创建NewByteArray把V11传进去 v21 = (*a1)-&gt;FindClass(a1,<br>&quot;java/lang/String&quot;); v22 = (*a1)-&gt;GetMethodID(a1, v21, &quot;<span class="hljs-tag">&lt;<span class="hljs-name">init</span></span><br><span class="hljs-tag">  &gt;</span>&quot;, &quot;([BLjava/lang/String;)V&quot;); v13 = j_strlen(v11); v19 =<br>  (*a1)-&gt;NewByteArray(a1, v13); v14 = j_strlen(v11);<br>  (*a1)-&gt;SetByteArrayRegion(a1, v19, 0, v14, v11);<br>  //将bytearray转string，utf-8编码 v15 = (*a1)-&gt;NewStringUTF(a1, &quot;utf-8&quot;); v16 =<br>  (*a1)-&gt;NewObject(a1, v21, v22, v19, v15); j_free(v11); j_free(inputBytesStr2);<br>  (*a1)-&gt;ReleaseStringUTFChars(a1, (jstring)inputBytes, inputBytesStr); return<br>  (*a1)-&gt;PopLocalFrame(a1, v16);&lt;/init<br>&gt;<br></code></pre></td></tr></table></figure><p>F5 跟踪算法的具体方法<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646405854656-76acc26e-eea5-4007-b17a-c036e2356d35.png#clientId=u15db014e-5b2a-4&from=paste&height=31&id=u7ffcb81b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=61&originWidth=553&originalType=binary%E2%88%B6=1&size=5013&status=done&style=none&taskId=u9c366d65-ce4b-4d4e-bc4a-605f95815f3&width=276.5" alt="image.png"><br>右键<img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646405863756-ae872cb6-a5dc-4619-98b2-a291511d8ad6.png#clientId=u15db014e-5b2a-4&from=paste&height=22&id=udf1c6635&margin=%5Bobject%20Object%5D&name=image.png&originHeight=44&originWidth=373&originalType=binary%E2%88%B6=1&size=1910&status=done&style=none&taskId=u9d48872f-e6df-43f2-b1f3-ba73bab68ba&width=186.5" alt="image.png"><br>查看<img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646405881963-62b62183-e6e5-4bcd-bcf4-cdea6d058d43.png#clientId=u15db014e-5b2a-4&from=paste&height=24&id=ud0847359&margin=%5Bobject%20Object%5D&name=image.png&originHeight=47&originWidth=173&originalType=binary%E2%88%B6=1&size=2193&status=done&style=none&taskId=ua852d95e-47a9-47ad-9a2f-7690ac10050&width=86.5" alt="image.png"> text view<br>得到偏移地址 0x1BD0+1<br>也可以按 TAB 键直接跳转</p><h2 id="frida-hook-代码："><a href="#frida-hook-代码：" class="headerlink" title="frida hook 代码："></a>frida hook 代码：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">var baseAddr = Module.findBaseAddress(&quot;libutility.so&quot;) var MDStringOld =<br>baseAddr.add(0x1BD0).add(0x1) Interceptor.attach(MDStringOld, &#123; onEnter:<br>function (args) &#123; console.log(&quot;input:\n&quot;, hexdump(this.arg0)) &#125;, onLeave:<br>function (retval) &#123; console.log(&quot;result:\n&quot;, hexdump(retval)) &#125; &#125;)<br></code></pre></td></tr></table></figure><h2 id="使用-unidgb-hook"><a href="#使用-unidgb-hook" class="headerlink" title="使用 unidgb hook"></a>使用 unidgb hook</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">IHookZz hookZz = HookZz.getInstance(emulator); hookZz.wrap(module.base + 0x1BD0<br>+ 1, new WrapCallback<span class="hljs-tag">&lt;<span class="hljs-name">HookZzArm32RegisterContext</span></span><br><span class="hljs-tag">  &gt;</span>() &#123; // inline wrap导出函数 @Override // 类似于 frida onEnter public void<br>  preCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; // 类似于Frida<br>  args[0] Pointer input = ctx.getPointerArg(0); System.out.println(&quot;input:&quot; +<br>  input.getString(0)); &#125;; @Override // 类似于 frida onLeave public void<br>  postCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; Pointer result<br>  = ctx.getPointerArg(0); System.out.println(&quot;result:&quot; + result.getString(0)); &#125;<br>  &#125;);&lt;/HookZzArm32RegisterContext<br>&gt;<br></code></pre></td></tr></table></figure><h2 id="打印参数和返回值"><a href="#打印参数和返回值" class="headerlink" title="打印参数和返回值"></a>打印参数和返回值</h2><p>input:12345r0ysue<br>result:439a333788b0cecfce1389d4b83ba1cb</p><p>结果是 32 位，猜测 md5，测试下。<a href="https://gchq.github.io/CyberChef/">https://gchq.github.io/CyberChef/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646406527986-35e49466-b56e-4a20-8047-ac56a3f3a3fb.png#clientId=u15db014e-5b2a-4&from=paste&height=266&id=ub0454423&margin=%5Bobject%20Object%5D&name=image.png&originHeight=531&originWidth=456&originalType=binary%E2%88%B6=1&size=15489&status=done&style=none&taskId=u6bc5924f-fefb-425a-8c44-04ca2515716&width=228" alt="image.png"></p><p>最终结果：<br>339be88b</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><h3 id="java-层的方法到了-so-层后，前面会多两个参数，一个是-JNIEnv-，一个是无关紧要的参数"><a href="#java-层的方法到了-so-层后，前面会多两个参数，一个是-JNIEnv-，一个是无关紧要的参数" class="headerlink" title="java 层的方法到了 so 层后，前面会多两个参数，一个是 JNIEnv ，一个是无关紧要的参数"></a>java 层的方法到了 so 层后，前面会多两个参数，一个是 JNIEnv ，一个是无关紧要的参数</h3><h3 id="识别-JNIEnv-1"><a href="#识别-JNIEnv-1" class="headerlink" title="识别 JNIEnv"></a>识别 JNIEnv</h3><pre><code class="hljs">在第一个int 参数上按y，输入JNIEnv* ， jni的api就被识别出来了</code></pre><h3 id="重命名参数"><a href="#重命名参数" class="headerlink" title="重命名参数"></a>重命名参数</h3><pre><code class="hljs">在参数上按n</code></pre><h3 id="Thumb-指令需要-1"><a href="#Thumb-指令需要-1" class="headerlink" title="Thumb 指令需要+1"></a>Thumb 指令需要+1</h3><h3 id="unidgb-如何打-patch"><a href="#unidgb-如何打-patch" class="headerlink" title="unidgb 如何打 patch"></a>unidgb 如何打 patch</h3><h3 id="unidgb-如何使用-hookzz-hook-打印参数和返回值"><a href="#unidgb-如何使用-hookzz-hook-打印参数和返回值" class="headerlink" title="unidgb 如何使用 hookzz hook 打印参数和返回值"></a>unidgb 如何使用 hookzz hook 打印参数和返回值</h3><p>完</p><h1 id="第三课最右-V2-Sign"><a href="#第三课最右-V2-Sign" class="headerlink" title="第三课最右 V2-Sign"></a>第三课最右 V2-Sign</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646649113386-dbb731f1-6d91-4af9-a321-01cbb5b8742d.png#clientId=u877b6e81-3612-4&from=paste&height=187&id=u5bb6e8ba&margin=%5Bobject%20Object%5D&name=image.png&originHeight=373&originWidth=1497&originalType=binary%E2%88%B6=1&size=145934&status=done&style=none&taskId=u4a37372d-bfb0-41b0-8010-7a8f8875495&width=748.5" alt="image.png"><br>可以看到用了动态注册<br>静态注册不走 RegisterNative 的<br>把要调用的两个函数的地址记录下来<br>0x4a069</p><p>RegisterNative(com&#x2F;izuiyou&#x2F;network&#x2F;NetCrypto, native_init()V, RX@0x4004a069[libnet_crypto.so]0x4a069)</p><p>0x4a28d</p><p>RegisterNative(com&#x2F;izuiyou&#x2F;network&#x2F;NetCrypto, sign(Ljava&#x2F;lang&#x2F;String;[B)Ljava&#x2F;lang&#x2F;String;, RX@0x4004a28d[libnet_crypto.so]0x4a28d)</p><p>如果加载 so 第二个参数设置为 false，则会出现乱码<br>说明 SO 做了字符串混淆，这个解密一般发生在 Init array 节或者 JNI OnLoad 中<br>Shift+F7 查看 segments</p><p>这个问题后续再分析。。继续运行</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646650768117-364073c3-8503-4989-92b2-08d727d4d1f4.png#clientId=u877b6e81-3612-4&from=paste&height=154&id=uf39c3123&margin=%5Bobject%20Object%5D&name=image.png&originHeight=307&originWidth=1694&originalType=binary%E2%88%B6=1&size=123076&status=done&style=none&taskId=u26300d97-c60d-4396-a5d1-b68128af140&width=847" alt="image.png"></p><p>这个是由于一些常见的、系统的 Java 类和方法，Unidbg 作开发者已经做了处理，但不常使用的类库以及自定义 Java 类显然不在此列，我们需要补环境。</p><ul><li>用户类里面补，因为我们的 zuiyou 类继承了 AbstractJNI</li><li>AbstractJNI 里面补</li></ul><p>我们选择在用户类里面补，缺什么补什么。这里却的是 com&#x2F;izuiyou&#x2F;common&#x2F;base&#x2F;BaseApplication-&gt;getAppContext()Landroid&#x2F;content&#x2F;Context;<br>我们 new 一个 android&#x2F;content&#x2F;Context</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">return vm.resolveClass(&quot;android/content/Context&quot;).newObject(null);<br></code></pre></td></tr></table></figure><p>接下来处理 sign 方法:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646651175947-e04e3721-ba7f-4bba-b644-d6e58a826072.png#clientId=u877b6e81-3612-4&from=paste&height=29&id=u4ee15091&margin=%5Bobject%20Object%5D&name=image.png&originHeight=57&originWidth=629&originalType=binary%E2%88%B6=1&size=15632&status=done&style=none&taskId=u9995bf79-1a65-4764-9433-a917c7c44d4&width=314.5" alt="image.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">private String callSign()&#123; // 准备入参 List<span class="hljs-tag">&lt;<span class="hljs-name">object</span>&gt;</span><br>  list = new ArrayList<span class="hljs-tag">&lt;&gt;</span>(10); list.add(vm.getJNIEnv()); // 第一个参数是env<br>  list.add(0); //<br>  第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。<br>  list.add(vm.addLocalObject(new StringObject(vm, &quot;12345&quot;))); ByteArray<br>  plainText = new ByteArray(vm, &quot;r0ysue&quot;.getBytes(StandardCharsets.UTF_8));<br>  list.add(vm.addLocalObject(plainText)); Number number =<br>  module.callFunction(emulator, 0x4a28D, list.toArray()); return<br>  vm.getObject(number.intValue()).getValue().toString(); &#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><p>前 2 个参数不用管， 最后一个 bytearray 构造方式就是 new 一个 byteArray<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646651464843-7cfb97b4-f5ad-4805-a666-dd140e38c8ad.png#clientId=u877b6e81-3612-4&from=paste&height=67&id=uc1596f24&margin=%5Bobject%20Object%5D&name=image.png&originHeight=134&originWidth=1362&originalType=binary%E2%88%B6=1&size=45703&status=done&style=none&taskId=u03371502-f020-4036-a6be-7161cb493c4&width=681" alt="image.png"><br>继续补环境，依葫芦画瓢，把缺少的环境都给补了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html">@Override public DvmObject&lt;?&gt;<br>callObjectMethodV(BaseVM vm, DvmObject&lt;?&gt;<br>dvmObject, String signature, VaList vaList) &#123; switch (signature) &#123; case<br>&quot;android/content/Context-&gt;getClass()Ljava/lang/Class;&quot;: return<br>dvmObject.getObjectType(); case<br>&quot;java/lang/Class-&gt;getSimpleName()Ljava/lang/String;&quot;: return new<br>StringObject(vm, &quot;AppController&quot;); case<br>&quot;java/lang/String-&gt;getAbsolutePath()Ljava/lang/String;&quot;: case<br>&quot;android/content/Context-&gt;getFilesDir()Ljava/io/File;&quot;: return new<br>StringObject(vm, &quot;/data/user/0/cn.xiaochuankeji.tieba/files&quot;); &#125; return<br>super.callObjectMethodV(vm, dvmObject, signature, vaList); &#125; @Override public<br>boolean callStaticBooleanMethodV(BaseVM vm, DvmClass dvmClass, String signature,<br>VaList vaList) &#123; switch (signature) &#123; case<br>&quot;android/os/Debug-&gt;isDebuggerConnected()Z&quot;: return false; &#125; return<br>super.callStaticBooleanMethodV(vm, dvmClass, signature, vaList); &#125; @Override<br>public int callStaticIntMethodV(BaseVM vm, DvmClass dvmClass, String signature,<br>VaList vaList) &#123; switch (signature) &#123; case &quot;android/os/Process-&gt;myPid()I&quot;:<br>return 0; &#125; return super.callStaticIntMethodV(vm, dvmClass, signature, vaList);<br>&#125; private String callSign() &#123; // 准备入参 List<span class="hljs-tag">&lt;<span class="hljs-name">object</span>&gt;</span><br>  list = new ArrayList<span class="hljs-tag">&lt;&gt;</span>(10); list.add(vm.getJNIEnv()); // 第一个参数是env<br>  list.add(0); //<br>  第二个参数，实例方法是jobject，静态方法是jclass，直接填0，一般用不到。<br>  list.add(vm.addLocalObject(new StringObject(vm, &quot;12345&quot;))); ByteArray<br>  plainText = new ByteArray(vm, &quot;r0ysue&quot;.getBytes(StandardCharsets.UTF_8));<br>  list.add(vm.addLocalObject(plainText)); Number number =<br>  module.callFunction(emulator, 0x4a28D, list.toArray()); return<br>  vm.getObject(number.intValue()).getValue().toString(); &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">object</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646652348816-fe3478a6-badb-48e7-9fae-57ca07d8fec6.png#clientId=u877b6e81-3612-4&from=paste&height=24&id=u0923938c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=47&originWidth=534&originalType=binary%E2%88%B6=1&size=6098&status=done&style=none&taskId=u776df0f4-6bac-432d-af57-85622b9be95&width=267" alt="image.png"><br>搞定~</p><h2 id="算法还原"><a href="#算法还原" class="headerlink" title="算法还原"></a>算法还原</h2><p>因为返回值总是 32 位长度，且明文不变时输出也不变，很容易让人想到哈希算法，尤其是 MD5 算法。但是，样本经过了一定程度的 OLLVM 混淆，很难自上而下或者自下而上逐个模块分析代码逻辑，所以我们需要借助一下工具，当当当， FIndHash 试一下。<br>按 G 跳转到 65540</p><p>unidgb hook 65540 打印入参<br>不确定三个参数是指针还是数值，所以先全部做为数值处理，作为 long 类型看待，防止整数溢出。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646652606761-9a9fac28-3076-455f-afa4-55cc6a906044.png#clientId=u877b6e81-3612-4&from=paste&height=54&id=u0afb9841&margin=%5Bobject%20Object%5D&name=image.png&originHeight=107&originWidth=238&originalType=binary%E2%88%B6=1&size=4160&status=done&style=none&taskId=uba3097b9-7295-40e6-aac4-757ea85869a&width=119" alt="image.png"><br>参数 1 和 3 像是地址，参数 2 像是长度<br>打印内存：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">Inspector.inspect(ctx.getR0Pointer().getByteArray(0, 0x10), &quot;Arg1&quot;);<br>System.out.println(ctx.getR1Long());<br>Inspector.inspect(ctx.getR2Pointer().getByteArray(0, 0x10), &quot;Arg3&quot;); &#125;;<br>@Override // 类似于 frida onLeave public void postCall(Emulator&lt;?&gt;<br>emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; &#125; &#125;); &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">&gt;-----------------------------------------------------------------------------&lt;<br>[20:45:00 882]Arg1, md5=433fc65838eefef90efcd0dbebe279c0,<br>hex=723079737565004000f03f4018f7ffbf size: 16 0000: 72 30 79 73 75 65 00 40 00<br>F0 3F 40 18 F7 FF BF r0ysue.@..?@....<br>^-----------------------------------------------------------------------------^<br>6<br>&gt;-----------------------------------------------------------------------------&lt;<br>[20:45:00 886]Arg3, md5=8ea9479bc177e0a5b093801cefd5f32e,<br>hex=ecf6ffbf000000005bbf252988f6ffbf size: 16 0000: EC F6 FF BF 00 00 00 00 5B<br>BF 25 29 88 F6 FF BF ........[.%)....<br></code></pre></td></tr></table></figure><p>参数 1.就是字符串<br>参数 2 是长度刚好是 6<br>参数 3 一般都是存放结果的 buffer，c 开发者习惯，记住就好</p><p>打印结果：<br>preCall 存入，postCall 取出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">// push ctx.push(ctx.getR2Pointer());<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">// pop 取出 Pointer output = ctx.pop(); Inspector.inspect(output.getByteArray(0,<br>0x10), &quot;Arg3 after function&quot;);<br></code></pre></td></tr></table></figure><p>接下来分析算法：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646657375860-f8c0b959-3c55-4d94-8e38-58737c84c45a.png#clientId=u877b6e81-3612-4&from=paste&height=54&id=uee6cd7ff&margin=%5Bobject%20Object%5D&name=image.png&originHeight=107&originWidth=291&originalType=binary%E2%88%B6=1&size=5287&status=done&style=none&taskId=ua5b97116-38b0-4142-909d-a100e8c2a1f&width=145.5" alt="image.png"><br><strong>按 H 键将这 4 个数转为 16 进制</strong><br><strong>说它疑似 MD5 主要有两个依据</strong></p><ul><li>输出结果是 32 位，MD5 恰好也是 32 位长度。</li><li>有四个 IV，MD5 就有四个 IV</li></ul><p>但是他不是标准的 md5<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646657440586-698555a4-3cc3-4baa-9f14-f540f5714e85.png#clientId=u877b6e81-3612-4&from=paste&height=175&id=udf487c43&margin=%5Bobject%20Object%5D&name=image.png&originHeight=349&originWidth=713&originalType=binary%E2%88%B6=1&size=77624&status=done&style=none&taskId=u925ef396-d09f-4d95-b4b8-87d8b523ae7&width=356.5" alt="image.png"><br>标准的 4 个常量值与他不同<br>哈希算法的魔改，最简单的修改点就是修改 IV，此处似乎采用了这种。我们测试下结果发现果然如此~结束</p><h1 id="第四课"><a href="#第四课" class="headerlink" title="第四课"></a>第四课</h1><p>搭建基本架子跑起来~</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">RegisterNative(com/mfw/tnative/AuthorizeHelper,<br>xPreAuthencode(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;,<br>RX@0x4002e301[libmfw.so]0x2e301)<br></code></pre></td></tr></table></figure><p>得到地址：0x2e301<br>算法还原<br>测试发现，不论输入明文多长，都输出固定长度结果，所以疑似哈希算法，又因为输出恒为 40 位，所以又疑似哈希算法中的 SHA1 算法。<br>按 G 跳转到地址查看<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646895411986-3a17fa1c-323d-403a-901d-94d73cf36172.png#clientId=ua95ec78b-cfd4-4&from=paste&height=32&id=u2a3642d3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=63&originWidth=1371&originalType=binary%E2%88%B6=1&size=12936&status=done&style=none&taskId=uca6da765-8c97-42ce-a3b2-c0040916222&width=685.5" alt="image.png"></p><p>但我们在用 Unidbg 模拟执行时，并没有感受到 native 调用 JAVA 签名校验的烦恼，这是因为我们传入了 APK，Unidbg 替我们处理了这部分签名校验，但 Unidbg 并不能处理所有情况下的签名校验，所以在之前的一些例子里，我们会 patch 掉签名校验函数。</p><p>开始 hook</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">public void hook_312E0()&#123; // 获取HookZz对象 IHookZz hookZz =<br>HookZz.getInstance(emulator); // 加载HookZz，支持inline<br>hook，文档看https://github.com/jmpews/HookZz // enable hook<br>hookZz.enable_arm_arm64_b_branch(); // 测试enable_arm_arm64_b_branch，可有可无<br>// hook MDStringOld hookZz.wrap(module.base + 0x312E0 + 1, new<br>WrapCallback<span class="hljs-tag">&lt;<span class="hljs-name">HookZzArm32RegisterContext</span></span><br><span class="hljs-tag">  &gt;</span>() &#123; // inline wrap导出函数 @Override // 方法执行前 public void<br>  preCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; Pointer input<br>  = ctx.getPointerArg(0); byte[] inputhex = input.getByteArray(0,<br>  ctx.getR2Int()); Inspector.inspect(inputhex, &quot;input&quot;); Pointer out =<br>  ctx.getPointerArg(1); ctx.push(out); &#125;; @Override // 方法执行后 public void<br>  postCall(Emulator&lt;?&gt;<br>  emulator, HookZzArm32RegisterContext ctx, HookEntryInfo info) &#123; Pointer output<br>  = ctx.pop(); byte[] outputhex = output.getByteArray(0, 20);<br>  Inspector.inspect(outputhex, &quot;output&quot;); &#125; &#125;);<br>  hookZz.disable_arm_arm64_b_branch(); &#125;;&lt;/HookZzArm32RegisterContext<br>&gt;<br></code></pre></td></tr></table></figure><p>返回值就是我们的结果，那就是自定义函数 1 加密函数了。<br>进入 sub_312E0<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646895972748-ac45d1ec-aff9-4518-805e-8a88daddd59a.png#clientId=ua95ec78b-cfd4-4&from=paste&height=70&id=u31448231&margin=%5Bobject%20Object%5D&name=image.png&originHeight=140&originWidth=324&originalType=binary%E2%88%B6=1&size=7434&status=done&style=none&taskId=ubb86bfb4-39f9-4bd2-8b94-7c06228812d&width=162" alt="image.png"><br>发现 5 个常量，按 H 转为 16 进制</p><h1 id="第五课"><a href="#第五课" class="headerlink" title="第五课"></a>第五课</h1><p>nonce&#x3D;68D04064-17A1-4705-8F47-534740723D9A&amp;timestamp&#x3D;1646985629263&amp;devicetoken&#x3D;F1517503-9779-32B7-9C78-F5EF501102BC&amp;sign&#x3D;C08F72C468C86B764EFF3B782B766DA8</p><p>nonce&#x3D;68D04064-17A1-4705-8F47-534740723D9A&amp;timestamp&#x3D;1647001027020&amp;devicetoken&#x3D;F1517503-9779-32B7-9C78-F5EF501102BC&amp;sign&#x3D;E9C515DC7FAF190C20AB4E7E3C9869E1</p><p>无法 f5，使用 findHash 试试无结果<br>打开 unidgb 的 traceCode 功能<br>emulator.traceCode(module.base, module.base + module.size);<br>参数是起始地址和终止地址<br>trace 的汇编执行流到文件中，方便查看</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">emulator.traceCode(module.base, module.base + module.size);<br></code></pre></td></tr></table></figure><p>结果有 11w 行。。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646985200248-07b5dfcc-be01-438e-a65d-16549cd2517b.png#clientId=u7e96ddff-24dc-4&from=paste&height=92&id=ub4afb330&margin=%5Bobject%20Object%5D&name=image.png&originHeight=183&originWidth=1109&originalType=binary%E2%88%B6=1&size=35052&status=done&style=none&taskId=ua7caffdc-f178-44c5-a756-a4002d5f68e&width=554.5" alt="image.png"><br>MD5 在前面的篇幅中已经讲了很多了，它有两组标志性的数可以用于确认自身身份。</p><p>1.是 0x67452301 0xefcdab89 等四个魔术，但单靠这四个数证明不了是 MD5，也可能是别的哈希算法，除此之外，算法可能魔改常数。</p><p>2.MD5 的 64 个 K，K1-K64 是 MD5 独特的标志，简单的魔改也不会改 K 值。（其实 K 表也可以随便改，但一般的开发人员也不懂 K 的意义，不敢乱改。）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"># 魔数 A = 0x67452301 B = 0xefcdab89 C = 0x98badcfe D = 0x10325476 # K表 Ktable<br>= [0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee, 0xf57c0faf, 0x4787c62a,<br>0xa8304613, 0xfd469501, 0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,<br>0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821, 0xf61e2562, 0xc040b340,<br>0x265e5a51, 0xe9b6c7aa, 0xd62f105d, 0x2441453, 0xd8a1e681, 0xe7d3fbc8,<br>0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed, 0xa9e3e905, 0xfcefa3f8,<br>0x676f02d9, 0x8d2a4c8a, 0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,<br>0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70, 0x289b7ec6, 0xeaa127fa,<br>0xd4ef3085, 0x4881d05, 0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,<br>0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039, 0x655b59c3, 0x8f0ccc92,<br>0xffeff47d, 0x85845dd1, 0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,<br>0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391]<br></code></pre></td></tr></table></figure><p>我们在 trace 里面搜索魔数和 k 表。说明他是一个魔改的 md5 算法。<br>接下来我们做两件事</p><ul><li>从汇编 trace 中析出 MD5 的结果——用于确认输出是否与 MD5 有直接关系</li><li>从汇编 trace 中析出 MD5 的输入——用于确认函数的输入和 MD5 的输入的关系</li></ul><p>首先做第一件事</p><p>找 0x67452301（<strong>魔数 A</strong>）最后和谁相加<br>0x844525cc</p><p>计算两者相加的结果（如果大于 0xffffffff 则取低的 32 比特） 即 EB8A48CD<br>EB8A48CD<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646991530320-178d377e-2f32-43c6-aadd-506fbb5cf4d0.png#clientId=u7e96ddff-24dc-4&from=paste&height=399&id=u6828de8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=797&originWidth=750&originalType=binary%E2%88%B6=1&size=443621&status=done&style=none&taskId=u8a03ab47-90f6-4903-9e64-bc2bad47315&width=375" alt="image.png"></p><p>如果输入大于 0xffffffff 比特，那么调整一下端序，CD488AEB，这就是 MD5 前 8 个数字的结果<br>搜索一下 EB8A48CD，发现后面还有它参与的运算，这说明明文长度超过一个分组长，需要进行第二个分组的运算</p><p>同样找 EB8A48CD 最后和谁相加<br>0xEB8A48CD+ 0xd8e846f3 &#x3D; 1 C472 8FC0</p><p>取 C4728FC0 倒转端序 C08F72C4<br>我们发现这就是加密结果的前 8 个数,以此类推，第二第三第四部分，同理<br>C08F72C468C86B764EFF3B782B766DA8<br><strong>我们通过这种方式确认了，MD5 的结果就是加密的结果。</strong><br>那么做另一件事——Trace 汇编中析出 MD5 的明文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">在MD5具体流程中，每轮运算都需要64步，每步的第三个操作是选取明文的一截进行加法运算，第四个操作是和K相加。我们无法定位第三个操作，但因为第四个操作的K都是已知的，所以可以这样描述“第四个操作上方第一个add运算就是明文的一截+中间结果”<br>但是呢。。这前四步其实并没有硬性的顺序要求，生成的汇编代码常常不遵照顺序。。<br>但好在第一个F(B,C,D)的结果是固定的0xffffffff，它是一个很好的“锚点“<br>基于K值和这个锚点，我们可以在汇编trace中准确的析出明文——仅依靠trace汇编，不管OLLVM或者花指令将指令流变成10w行还是100w行，还是SO做了保护，明文不会完整出现在内存中，都不影响这个分析过程。<br></code></pre></td></tr></table></figure><p>我们搜索 K 表第一个值：0xd76aa478<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646991990819-d76993f8-300c-4588-9840-6b61a963aa1b.png#clientId=u7e96ddff-24dc-4&from=paste&height=109&id=ue7a285b5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=217&originWidth=851&originalType=binary%E2%88%B6=1&size=44335&status=done&style=none&taskId=u61d644ec-bed0-4659-8f47-84f7c2e53b0&width=425.5" alt="image.png"><br>0x30443836 我们转换下 36384430， cyberchef 中看一下<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646992067733-403875ca-980c-4348-9435-fa2742b680c8.png#clientId=u7e96ddff-24dc-4&from=paste&height=280&id=u0be61860&margin=%5Bobject%20Object%5D&name=image.png&originHeight=560&originWidth=883&originalType=binary%E2%88%B6=1&size=29204&status=done&style=none&taskId=u1432dea9-4709-45b3-9fc6-060ea3c3774&width=441.5" alt="image.png"></p><p>nonce&#x3D;68D04064-17A1-4705-8F47-534740723D9A&amp;timestamp&#x3D;1647001027020&amp;devicetoken&#x3D;F1517503-9779-32B7-9C78-F5EF501102BC&amp;sign&#x3D;E9C515DC7FAF190C20AB4E7E3C9869E1</p><p>第一个明文块：0x44303945 -&gt; 45393044 -&gt; 68D0</p><p>第二个明文块：0x446884aa-&gt; aa846844-&gt; 4064<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2744235/1646999826876-e8b9cdbe-1d5c-46d1-87b2-b9adc0ba7d84.png#clientId=u7e96ddff-24dc-4&from=paste&height=138&id=u1342c35f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=276&originWidth=1594&originalType=binary%E2%88%B6=1&size=91496&status=done&style=none&taskId=ue077988b-eb9a-4384-bf3f-5ac501237f8&width=797" alt="image.png"><br>nonce&#x3D;1F90A568-DBEE-4BD6-93A4-F4ABC2E324F0&amp;timestamp&#x3D;1647000109156&amp;devicetoken&#x3D;F1517503-9779-32B7-9C78-F5EF501102BC&amp;sign&#x3D;A40A56811AE194D2FCAE9A04998AC77F</p><p>0x30394631<br>31463930</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>语雀自动发布hexo</title>
    <link href="/2022/02/10/yuque/%E8%AF%AD%E9%9B%80%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83hexo/"/>
    <url>/2022/02/10/yuque/%E8%AF%AD%E9%9B%80%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="语语雀自动发布-hexo"><a href="#语语雀自动发布-hexo" class="headerlink" title="语语雀自动发布 hexo"></a>语语雀自动发布 hexo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">name: Blog CI/CD<br><br>on: [push, repository_dispatch]<br><br>jobs:<br>  blog-cicd:<br>    name: Hexo blog build &amp; deploy<br>    runs-on: ubuntu-latest<br>    env:<br>      TZ: Asia/Shanghai<br>    steps:<br>      - name: Checkout codes<br>        uses: actions/checkout<span class="hljs-meta">@v2</span><br><br>      - name: Setup node<br>        uses: actions/setup-node<span class="hljs-meta">@v1</span><br>        with:<br>          node-version: <span class="hljs-string">&quot;12.x&quot;</span><br>      - name: Cache node modules<br>        uses: actions/cache<span class="hljs-meta">@v1</span><br>        with:<br>          path: ~/.npm<br>          key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles(<span class="hljs-string">&#x27;**/package-lock.json&#x27;</span>) &#125;&#125;<br><br>      - name: Install dependencies<br>        run: |<br>          npm install hexo-cli -g<br>          npm install yuque-hexo -g<br>          npm install<br>          yuque-hexo sync<br>      - name: Generate files<br>        run: hexo generate<br><br>      - name: Deploy blog<br>        run: |<br>          git clone <span class="hljs-string">&quot;https://$&#123;&#123; secrets.GH_REF &#125;&#125;&quot;</span> deploy_git<br>          mv ./deploy_git/.git ./<span class="hljs-keyword">public</span>/<br>          cd ./<span class="hljs-keyword">public</span><br>          git config user.name <span class="hljs-string">&quot;linuxxx&quot;</span><br>          git config user.email <span class="hljs-string">&quot;o.ounix@gmail.com&quot;</span><br>          git add .<br>          git commit -m <span class="hljs-string">&quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br>          git push --force --quiet <span class="hljs-string">&quot;https://$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@$&#123;&#123; secrets.GH_REF &#125;&#125;&quot;</span> master:master<br><br></code></pre></td></tr></table></figure><p>测试正文！<br>参考文章:<a href="https://yichen115.github.io/2020/07/16/gtb5ck/">https://yichen115.github.io/2020/07/16/gtb5ck/</a> 感谢！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
